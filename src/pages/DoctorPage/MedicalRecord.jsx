import React, { useState, useEffect } from 'react';
import { 
  Card, 
  Button, 
  Form, 
  Input, 
  Select, 
  DatePicker, 
  Space, 
  message, 
  Steps, 
  Divider,
  Row,
  Col,
  Typography,
  Tag,
  Modal,
  Table,
  Popconfirm,
  Spin,
  Collapse,
  Badge,
  Tooltip,
  Progress,
  Alert,
  Timeline,
  Statistic,
  Avatar,
  Descriptions
} from 'antd';
import { 
  UserOutlined, 
  CalendarOutlined, 
  MedicineBoxOutlined,
  FileTextOutlined,
  SaveOutlined,
  ArrowLeftOutlined,
  PlusOutlined,
  DeleteOutlined,
  HeartOutlined,
  EyeOutlined,
  ExperimentOutlined,
  CheckCircleOutlined,
  ClockCircleOutlined,
  ExclamationCircleOutlined,
  InfoCircleOutlined,
  EditOutlined,
  PrinterOutlined,
  DownloadOutlined,
  PhoneOutlined,
  MailOutlined,
  HomeOutlined
} from '@ant-design/icons';
import { useNavigate, useParams } from 'react-router-dom';
import dayjs from 'dayjs';
import { 
  getAppointmentDetails, 
  updateAppointmentStatus,
  createPrescription,
  getMedicines
} from '../../services/doctorService';
import './MedicalRecord.css';

const { Title, Text } = Typography;
const { TextArea } = Input;
const { Option } = Select;
const { Step } = Steps;

// Error Boundary Component
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }

  componentDidCatch(error, errorInfo) {
    console.error('ErrorBoundary caught an error:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div style={{ padding: '24px', textAlign: 'center' }}>
          <h3 style={{ color: '#ff4d4f' }}>ƒê√£ x·∫£y ra l·ªói trong component</h3>
          <p>{this.state.error?.message || 'Unknown error'}</p>
          <Button onClick={() => window.location.reload()}>
            T·∫£i l·∫°i trang
          </Button>
        </div>
      );
    }

    return this.props.children;
  }
}

const MedicalRecord = () => {
  const navigate = useNavigate();
  const { appointmentId } = useParams();
  const [form] = Form.useForm();
  const [prescriptionForm] = Form.useForm();
  
  const [appointment, setAppointment] = useState(null);
  const [loading, setLoading] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);
  const [medicines, setMedicines] = useState([]);
  const [prescriptionItems, setPrescriptionItems] = useState([]);
  const [prescriptionModalVisible, setPrescriptionModalVisible] = useState(false);
  const [labTests, setLabTests] = useState([]);
  const [imagingTests, setImagingTests] = useState([]);
  const [followUpDate, setFollowUpDate] = useState(null);
  const [error, setError] = useState(null);

  // Helper function to safely render values
  const safeRender = (value, fallback = 'N/A') => {
    if (value === null || value === undefined) return fallback;
    if (Array.isArray(value)) {
      return value.map(item => safeRender(item)).join(', ');
    }
    if (typeof value === 'object') {
      // Handle address object
      if (value.street || value.city || value.state || value.zipCode || value.country) {
        const addressParts = [
          value.street,
          value.city, 
          value.state,
          value.zipCode,
          value.country
        ].filter(Boolean);
        return addressParts.join(', ');
      }
      // Handle other common object types
      if (value.idNumber) return value.idNumber;
      if (value.number) return value.number;
      if (value.value) return value.value;
      if (value.condition) return value.condition;
      if (value.year) return value.year;
      if (value.notes) return value.notes;
      if (value.fullName) return value.fullName;
      if (value.email) return value.email;
      if (value.phone) return value.phone;
      // For any other object, try to convert to string safely
      try {
        return JSON.stringify(value);
      } catch (e) {
        return '[Object]';
      }
    }
    return String(value);
  };

  useEffect(() => {
    if (appointmentId) {
      try {
        fetchAppointmentDetails();
        fetchMedicines();
        
        // Check if we have currentStep from navigation state
        const location = window.location;
        if (location.state && location.state.currentStep !== undefined) {
          setCurrentStep(location.state.currentStep);
          console.log('üéØ Starting at step:', location.state.currentStep + 1);
        }
      } catch (err) {
        console.error('Error in useEffect:', err);
        setError(err.message || 'Unknown error');
      }
    } else {
      message.error('Kh√¥ng t√¨m th·∫•y th√¥ng tin l·ªãch h·∫πn');
      navigate('/doctor/appointments');
    }
  }, [appointmentId]);

  const fetchAppointmentDetails = async () => {
    try {
      setLoading(true);
      console.log('üîç Fetching appointment details for ID:', appointmentId);
      const response = await getAppointmentDetails(appointmentId);
      console.log('üìã API Response:', response);
      
      if (response && response.data) {
        console.log('‚úÖ Setting appointment data:', response.data);
        setAppointment(response.data);
        
        // Pre-fill form with existing data
        const formData = {
          // Step 1: Physical Examination
          vitalSigns: response.data.physicalExamination?.vitalSigns || '',
          generalAppearance: response.data.physicalExamination?.generalAppearance || '',
          oralExamination: response.data.physicalExamination?.oralExamination || '',
          otherFindings: response.data.physicalExamination?.otherFindings || '',
          
          // Step 2: Lab Tests
          labTests: response.data.labTests || [],
          imagingTests: response.data.imagingTests || [],
          testInstructions: response.data.testInstructions || '',
          
          // Step 3: Re-examination
          testResults: response.data.testResults || '',
          reExaminationFindings: response.data.reExaminationFindings || '',
          preliminaryDiagnosis: response.data.preliminaryDiagnosis || '',
          differentialDiagnosis: response.data.differentialDiagnosis || '',
          finalDiagnosis: response.data.finalDiagnosis || '',
          
          // Step 4: Treatment
          treatment: response.data.treatment || '',
          procedures: response.data.procedures || [],
          
          // Step 5: Follow-up
          followUpInstructions: response.data.followUpInstructions || '',
          
          // Legacy fields
          clinicalDiagnosis: response.data.clinicalDiagnosis || '',
          notes: response.data.notes || ''
        };
        
        console.log('üìù Pre-filling form with data:', formData);
        form.setFieldsValue(formData);
      } else {
        console.error('‚ùå Invalid response format:', response);
        throw new Error('Invalid response format');
      }
    } catch (error) {
      console.error('‚ùå Error fetching appointment details:', error);
      message.error('L·ªói khi t·∫£i th√¥ng tin l·ªãch h·∫πn: ' + (error.message || 'Unknown error'));
      navigate('/doctor/appointments');
    } finally {
      setLoading(false);
    }
  };

  const fetchMedicines = async () => {
    try {
      const response = await getMedicines();
      setMedicines(response.data || []);
    } catch (error) {
      console.error('Error fetching medicines:', error);
      message.error('L·ªói khi t·∫£i danh s√°ch thu·ªëc');
    }
  };

  const handleStepChange = (step) => {
    // Cho ph√©p chuy·ªÉn ƒë·∫øn b∆∞·ªõc tr∆∞·ªõc ƒë√≥ ƒë·ªÉ xem d·ªØ li·ªáu
    if (step < currentStep) {
      console.log(`üìã Viewing step ${step + 1} data`);
      setCurrentStep(step);
      return;
    }
    
    // Ch·ªâ cho ph√©p chuy·ªÉn ƒë·∫øn b∆∞·ªõc ti·∫øp theo n·∫øu ƒë√£ ho√†n th√†nh b∆∞·ªõc hi·ªán t·∫°i
    if (step > currentStep) {
      message.warning('Vui l√≤ng ho√†n th√†nh b∆∞·ªõc hi·ªán t·∫°i tr∆∞·ªõc khi chuy·ªÉn sang b∆∞·ªõc ti·∫øp theo');
      return;
    }
    
    setCurrentStep(step);
  };

  const handleSavePhysicalExamination = async (values) => {
    try {
      setLoading(true);
      await updateAppointmentStatus(appointmentId, {
        physicalExamination: values,
        status: 'in-progress'
      });
      
      message.success('L∆∞u kh√°m l√¢m s√†ng th√†nh c√¥ng');
      setCurrentStep(1);
    } catch (error) {
      console.error('Error saving physical examination:', error);
      message.error('L·ªói khi l∆∞u kh√°m l√¢m s√†ng');
    } finally {
      setLoading(false);
    }
  };

  const handleSaveLabTests = async (values) => {
    try {
      setLoading(true);
      await updateAppointmentStatus(appointmentId, {
        labTests: values.labTests,
        imagingTests: values.imagingTests
      });
      
      message.success('L∆∞u c·∫≠n l√¢m s√†ng th√†nh c√¥ng');
      setCurrentStep(2);
    } catch (error) {
      console.error('Error saving lab tests:', error);
      message.error('L·ªói khi l∆∞u c·∫≠n l√¢m s√†ng');
    } finally {
      setLoading(false);
    }
  };

  const handleSaveDiagnosis = async (values) => {
    try {
      setLoading(true);
      await updateAppointmentStatus(appointmentId, {
        preliminaryDiagnosis: values.preliminaryDiagnosis,
        differentialDiagnosis: values.differentialDiagnosis,
        finalDiagnosis: values.finalDiagnosis
      });
      
      message.success('L∆∞u ch·∫©n ƒëo√°n th√†nh c√¥ng');
      setCurrentStep(3);
    } catch (error) {
      console.error('Error saving diagnosis:', error);
      message.error('L·ªói khi l∆∞u ch·∫©n ƒëo√°n');
    } finally {
      setLoading(false);
    }
  };

  const handleSaveTreatment = async (values) => {
    try {
      setLoading(true);
      await updateAppointmentStatus(appointmentId, {
        treatment: values.treatment,
        procedures: values.procedures,
        homeCare: values.homeCare
      });
      
      message.success('L∆∞u ƒëi·ªÅu tr·ªã th√†nh c√¥ng');
      setCurrentStep(4);
    } catch (error) {
      console.error('Error saving treatment:', error);
      message.error('L·ªói khi l∆∞u ƒëi·ªÅu tr·ªã');
    } finally {
      setLoading(false);
    }
  };

  const handleSaveFollowUp = async (values) => {
    try {
      setLoading(true);
      await updateAppointmentStatus(appointmentId, {
        followUpDate: values.followUpDate,
        followUpInstructions: values.followUpInstructions,
        warnings: values.warnings
      });
      
      message.success('L∆∞u theo d√µi th√†nh c√¥ng');
      setCurrentStep(4);
    } catch (error) {
      console.error('Error saving follow-up:', error);
      message.error('L·ªói khi l∆∞u theo d√µi');
    } finally {
      setLoading(false);
    }
  };

  const handleAddPrescriptionItem = () => {
    setPrescriptionModalVisible(true);
  };

  const handleSavePrescriptionItem = (values) => {
    const newItem = {
      id: Date.now(),
      medicine: values.medicine,
      dosage: values.dosage,
      frequency: values.frequency,
      duration: values.duration,
      instructions: values.instructions
    };
    
    setPrescriptionItems([...prescriptionItems, newItem]);
    setPrescriptionModalVisible(false);
    prescriptionForm.resetFields();
    message.success('Th√™m thu·ªëc v√†o ƒë∆°n th√†nh c√¥ng');
  };

  const handleRemovePrescriptionItem = (id) => {
    setPrescriptionItems(prescriptionItems.filter(item => item.id !== id));
  };

  const handleSavePrescription = async () => {
    if (prescriptionItems.length === 0) {
      message.warning('Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt lo·∫°i thu·ªëc');
      return;
    }

    try {
      setLoading(true);
      await createPrescription({
        appointmentId: appointmentId,
        patientId: appointment.patient._id,
        doctorId: appointment.doctor._id,
        medicines: prescriptionItems,
        notes: form.getFieldValue('prescriptionNotes') || ''
      });
      
      message.success('L∆∞u ƒë∆°n thu·ªëc th√†nh c√¥ng');
      setCurrentStep(3);
    } catch (error) {
      console.error('Error saving prescription:', error);
      message.error('L·ªói khi l∆∞u ƒë∆°n thu·ªëc');
    } finally {
      setLoading(false);
    }
  };


  const handleCompleteExamination = async () => {
    try {
      // Validate appointmentId
      if (!appointmentId) {
        message.error('Kh√¥ng t√¨m th·∫•y ID l·ªãch h·∫πn');
        return;
      }
      
      // Validate appointment
      if (!appointment) {
        message.error('Kh√¥ng t√¨m th·∫•y th√¥ng tin l·ªãch h·∫πn');
        return;
      }
      
      setLoading(true);
      
      // L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu t·ª´ form
      const formValues = form.getFieldsValue();
      
      // T·∫°o d·ªØ li·ªáu c·∫≠p nh·∫≠t ƒë∆°n gi·∫£n
      const updateData = {
        status: 'completed',
        completedAt: new Date(),
        // Ch·ªâ g·ª≠i c√°c field c·∫ßn thi·∫øt
        finalDiagnosis: formValues.finalDiagnosis || formValues.clinicalDiagnosis || 'Kh√°m rƒÉng ƒë·ªãnh k·ª≥',
        treatment: formValues.treatment || 'V·ªá sinh rƒÉng mi·ªáng ƒë·ªãnh k·ª≥',
        followUpInstructions: formValues.followUpInstructions || 'T√°i kh√°m sau 6 th√°ng',
        followUpDate: formValues.followUpDate ? new Date(formValues.followUpDate) : null
      };
      
      // C·∫≠p nh·∫≠t appointment status
      await updateAppointmentStatus(appointmentId, updateData);
      
      message.success('Ho√†n th√†nh kh√°m b·ªánh v√† l∆∞u h·ªì s∆° th√†nh c√¥ng');
      
      // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang appointments
      setTimeout(() => {
        navigate('/doctor/appointments');
      }, 1000);
    } catch (error) {
      console.error('Error completing examination:', error);
      message.error('L·ªói khi ho√†n th√†nh kh√°m b·ªánh');
    } finally {
      setLoading(false);
    }
  };

  const prescriptionColumns = [
    {
      title: 'T√™n thu·ªëc',
      dataIndex: 'medicine',
      key: 'medicine',
    },
    {
      title: 'Li·ªÅu l∆∞·ª£ng',
      dataIndex: 'dosage',
      key: 'dosage',
    },
    {
      title: 'T·∫ßn su·∫•t',
      dataIndex: 'frequency',
      key: 'frequency',
    },
    {
      title: 'Th·ªùi gian',
      dataIndex: 'duration',
      key: 'duration',
    },
    {
      title: 'H∆∞·ªõng d·∫´n',
      dataIndex: 'instructions',
      key: 'instructions',
      ellipsis: true,
    },
    {
      title: 'H√†nh ƒë·ªông',
      key: 'actions',
      render: (_, record) => (
        <Popconfirm
          title="X√≥a thu·ªëc n√†y?"
          onConfirm={() => handleRemovePrescriptionItem(record.id)}
          okText="X√≥a"
          cancelText="H·ªßy"
        >
          <Button type="link" danger icon={<DeleteOutlined />}>
            X√≥a
          </Button>
        </Popconfirm>
      ),
    },
  ];

  if (error) {
    return (
      <div style={{ padding: '24px', textAlign: 'center' }}>
        <h3 style={{ color: '#ff4d4f' }}>ƒê√£ x·∫£y ra l·ªói</h3>
        <p>{error}</p>
        <Button onClick={() => navigate('/doctor/appointments')}>
          Quay l·∫°i danh s√°ch l·ªãch h·∫πn
        </Button>
      </div>
    );
  }

  if (!appointment || !appointment._id) {
    return (
      <div style={{ padding: '24px', textAlign: 'center' }}>
        <Spin size="large" />
        <div style={{ marginTop: '16px' }}>ƒêang t·∫£i th√¥ng tin l·ªãch h·∫πn...</div>
      </div>
    );
  }

  try {
    // Debug log
    console.log('Rendering MedicalRecord with appointment:', appointment);
    
    return (
      <div className="medical-record-container">
        {/* Header Section */}
        <div className="medical-record-header fade-in">
          <Row gutter={[24, 24]} align="middle">
            <Col xs={24} sm={8} md={6}>
              <div className="patient-avatar">
                <UserOutlined />
              </div>
            </Col>
            <Col xs={24} sm={16} md={18}>
              <Title level={2} style={{ color: 'white', margin: 0 }}>
                H·ªì s∆° b·ªánh √°n
              </Title>
              <Text style={{ color: 'rgba(255,255,255,0.9)', fontSize: '16px' }}>
                B·ªánh nh√¢n: {safeRender(appointment?.patient?.user?.fullName)}
              </Text>
              <div style={{ marginTop: '12px' }}>
                <Space>
                  <Tag color="rgba(255,255,255,0.2)" style={{ color: 'white' }}>
                    <CalendarOutlined /> {dayjs(appointment?.appointmentDate).format('DD/MM/YYYY')}
                  </Tag>
                  <Tag color="rgba(255,255,255,0.2)" style={{ color: 'white' }}>
                    <ClockCircleOutlined /> {safeRender(appointment?.startTime)} - {safeRender(appointment?.endTime)}
                  </Tag>
                  <Tag color="rgba(255,255,255,0.2)" style={{ color: 'white' }}>
                    <FileTextOutlined /> {safeRender(appointment?.appointmentId)}
                  </Tag>
                </Space>
              </div>
            </Col>
          </Row>
        </div>

        {/* Patient Info Card */}
        <div className="patient-info-card fade-in">
          <Row gutter={[24, 16]}>
            <Col xs={24} sm={12} md={6}>
              <Statistic
                title="H·ªç t√™n"
                value={safeRender(appointment?.patient?.user?.fullName)}
                prefix={<UserOutlined />}
                valueStyle={{ color: '#1890ff', fontSize: '16px' }}
              />
            </Col>
            <Col xs={24} sm={12} md={6}>
              <Statistic
                title="Tu·ªïi"
                value={safeRender(appointment?.patient?.basicInfo?.age)}
                prefix={<HeartOutlined />}
                valueStyle={{ color: '#1890ff' }}
              />
            </Col>
            <Col xs={24} sm={12} md={6}>
              <Statistic
                title="Gi·ªõi t√≠nh"
                value={safeRender(appointment?.patient?.basicInfo?.gender)}
                prefix={<UserOutlined />}
                valueStyle={{ color: '#1890ff' }}
              />
            </Col>
            <Col xs={24} sm={12} md={6}>
              <Statistic
                title="SƒêT"
                value={safeRender(appointment?.patient?.contactInfo?.phone)}
                prefix={<PhoneOutlined />}
                valueStyle={{ color: '#1890ff' }}
              />
            </Col>
          </Row>
          <Row gutter={[24, 16]} style={{ marginTop: '16px' }}>
            <Col xs={24} sm={12} md={8}>
              <Statistic
                title="Email"
                value={safeRender(appointment?.patient?.user?.email)}
                prefix={<MailOutlined />}
                valueStyle={{ color: '#1890ff', fontSize: '14px' }}
              />
            </Col>
            <Col xs={24} sm={12} md={8}>
              <Statistic
                title="ƒê·ªãa ch·ªâ"
                value={safeRender(appointment?.patient?.contactInfo?.address)}
                prefix={<HomeOutlined />}
                valueStyle={{ color: '#1890ff', fontSize: '14px' }}
              />
            </Col>
            <Col xs={24} sm={12} md={8}>
              <Statistic
                title="L√Ω do kh√°m"
                value={safeRender(appointment?.reasonForVisit)}
                prefix={<ExclamationCircleOutlined />}
                valueStyle={{ color: '#1890ff', fontSize: '14px' }}
              />
            </Col>
          </Row>
        </div>

        {/* Progress Indicator */}
        <div className="progress-indicator fade-in">
          <Row gutter={[16, 16]} align="middle">
            <Col xs={24} sm={16}>
              <Progress 
                percent={((currentStep + 1) / 5) * 100} 
                strokeColor={{
                  '0%': '#1890ff',
                  '100%': '#40a9ff',
                }}
                trailColor="#f0f0f0"
                strokeWidth={8}
              />
            </Col>
            <Col xs={24} sm={8}>
              <div className="progress-stats">
                <div className="stat-item">
                  <div className="stat-value">{currentStep + 1}/5</div>
                  <div className="stat-label">B∆∞·ªõc hi·ªán t·∫°i</div>
                </div>
                <div className="stat-item">
                  <div className="stat-value">{Math.round(((currentStep + 1) / 5) * 100)}%</div>
                  <div className="stat-label">Ho√†n th√†nh</div>
                </div>
              </div>
            </Col>
          </Row>
        </div>

        {/* Steps Container */}
        <div className="steps-container fade-in">
          <Alert
            message="üí° B·∫°n c√≥ th·ªÉ click v√†o c√°c b∆∞·ªõc ƒë√£ ho√†n th√†nh ƒë·ªÉ xem l·∫°i d·ªØ li·ªáu"
            type="info"
            showIcon
            className="alert-enhanced"
          />
          
          <Steps 
            current={currentStep} 
            onChange={handleStepChange}
            type="navigation"
            size="small"
          >
            <Step 
              title="Kh√°m l√¢m s√†ng" 
              description="Kh√°m t·ªïng qu√°t v√† chuy√™n khoa"
              status={appointment?.physicalExamination ? "finish" : "wait"}
              icon={<EyeOutlined />}
            />
            <Step 
              title="Ch·ªâ ƒë·ªãnh c·∫≠n l√¢m s√†ng" 
              description="Ch·ªâ ƒë·ªãnh x√©t nghi·ªám v√† ch·ªù k·∫øt qu·∫£"
              status={appointment?.labTests?.length > 0 ? "finish" : "wait"}
              icon={<ExperimentOutlined />}
            />
            <Step 
              title="Ch·∫©n ƒëo√°n" 
              description="Ch·∫©n ƒëo√°n d·ª±a tr√™n k·∫øt qu·∫£ x√©t nghi·ªám"
              status={appointment?.finalDiagnosis ? "finish" : currentStep === 2 ? "process" : "wait"}
              icon={<CheckCircleOutlined />}
            />
            <Step 
              title="Th·ª±c hi·ªán ƒëi·ªÅu tr·ªã" 
              description="Th·ª±c hi·ªán c√°c d·ªãch v·ª• rƒÉng (tr√°m, nh·ªï, c·∫°o v√¥i...)"
              status={appointment?.procedures ? "finish" : currentStep === 3 ? "process" : "wait"}
              icon={<MedicineBoxOutlined />}
            />
            <Step 
              title="K√™ ƒë∆°n & Theo d√µi" 
              description="K√™ ƒë∆°n thu·ªëc v√† l·ªãch t√°i kh√°m"
              status={appointment?.followUpInstructions ? "finish" : currentStep === 4 ? "process" : "wait"}
              icon={<ClockCircleOutlined />}
            />
          </Steps>
        </div>

        {/* Form Content */}
        <div className="step-content fade-in">
          <Card
            title={
              <div className="section-header">
                <div className="section-icon">
                  {currentStep === 0 && <EyeOutlined />}
                  {currentStep === 1 && <ExperimentOutlined />}
                  {currentStep === 2 && <CheckCircleOutlined />}
                  {currentStep === 3 && <MedicineBoxOutlined />}
                  {currentStep === 4 && <ClockCircleOutlined />}
                </div>
                <div>
                  <h3 className="section-title">
                    {currentStep === 0 && 'Kh√°m l√¢m s√†ng'}
                    {currentStep === 1 && 'Ch·ªâ ƒë·ªãnh c·∫≠n l√¢m s√†ng'}
                    {currentStep === 2 && 'Ch·∫©n ƒëo√°n'}
                    {currentStep === 3 && 'Th·ª±c hi·ªán ƒëi·ªÅu tr·ªã'}
                    {currentStep === 4 && 'K√™ ƒë∆°n & Theo d√µi'}
                  </h3>
                  <p className="section-description">
                    {currentStep === 0 && 'Th·ª±c hi·ªán kh√°m t·ªïng qu√°t v√† chuy√™n khoa rƒÉng mi·ªáng'}
                    {currentStep === 1 && 'Ch·ªâ ƒë·ªãnh c√°c x√©t nghi·ªám c·∫ßn thi·∫øt v√† ch·ªù k·∫øt qu·∫£'}
                    {currentStep === 2 && 'Ch·∫©n ƒëo√°n d·ª±a tr√™n k·∫øt qu·∫£ x√©t nghi·ªám v√† kh√°m l√¢m s√†ng'}
                    {currentStep === 3 && 'Th·ª±c hi·ªán c√°c d·ªãch v·ª• rƒÉng nh∆∞ tr√°m, nh·ªï, c·∫°o v√¥i...'}
                    {currentStep === 4 && 'K√™ ƒë∆°n thu·ªëc v√† l√™n l·ªãch t√°i kh√°m'}
                  </p>
                </div>
              </div>
            }
            style={{ border: 'none', boxShadow: 'none' }}
          >


            <Form form={form} layout="vertical">
              {/* Step 1: Physical Examination */}
              {currentStep === 0 && (
                <div className="form-section slide-in">
                  <Row gutter={[24, 24]}>
                    <Col xs={24} sm={12}>
                      <Form.Item
                        name="vitalSigns"
                        label="D·∫•u hi·ªáu sinh t·ªìn"
                        className="form-item-enhanced"
                      >
                        <TextArea
                          rows={3}
                          placeholder="M·∫°ch, huy·∫øt √°p, nhi·ªát ƒë·ªô, nh·ªãp th·ªü..."
                          prefix={<HeartOutlined />}
                        />
                      </Form.Item>
                    </Col>
                    <Col xs={24} sm={12}>
                      <Form.Item
                        name="generalAppearance"
                        label="T√¨nh tr·∫°ng chung"
                        className="form-item-enhanced"
                      >
                        <TextArea
                          rows={3}
                          placeholder="Tinh th·∫ßn, da ni√™m m·∫°c, dinh d∆∞·ª°ng..."
                          prefix={<UserOutlined />}
                        />
                      </Form.Item>
                    </Col>
                  </Row>

                  <Form.Item
                    name="oralExamination"
                    label="Kh√°m rƒÉng mi·ªáng chuy√™n khoa"
                    rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p k·∫øt qu·∫£ kh√°m rƒÉng mi·ªáng' }]}
                    className="form-item-enhanced"
                  >
                    <TextArea
                      rows={4}
                      placeholder="T√¨nh tr·∫°ng rƒÉng, n∆∞·ªõu, ni√™m m·∫°c, kh·ªõp c·∫Øn, m√¥ m·ªÅm (l∆∞·ª°i, m√°, m√¥i)..."
                    />
                  </Form.Item>

                  <Form.Item
                    name="occlusionExamination"
                    label="Kh√°m kh·ªõp c·∫Øn v√† ch·ª©c nƒÉng"
                    className="form-item-enhanced"
                  >
                    <TextArea
                      rows={3}
                      placeholder="Kh·ªõp c·∫Øn, ch·ª©c nƒÉng nhai, nu·ªët, kh·ªõp th√°i d∆∞∆°ng h√†m..."
                    />
                  </Form.Item>

                  <Form.Item
                    name="otherFindings"
                    label="C√°c ph√°t hi·ªán kh√°c"
                    className="form-item-enhanced"
                  >
                    <TextArea
                      rows={3}
                      placeholder="C√°c d·∫•u hi·ªáu b·∫•t th∆∞·ªùng kh√°c..."
                    />
                  </Form.Item>
                  
                  <div className="action-buttons">
                    <Space>
                      <Button 
                        type="primary" 
                        icon={<SaveOutlined />}
                        onClick={async () => {
                          try {
                            const values = await form.validateFields();
                            await handleSavePhysicalExamination(values);
                          } catch (error) {
                            if (error.errorFields) {
                              message.error('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc');
                            } else {
                              console.error('Error validating form:', error);
                              message.error('L·ªói khi x·ª≠ l√Ω form');
                            }
                          }
                        }}
                        loading={loading}
                        className="btn-primary-enhanced"
                      >
                        L∆∞u kh√°m l√¢m s√†ng
                      </Button>
                      <Button 
                        onClick={() => navigate('/doctor/appointments')}
                        className="btn-secondary-enhanced"
                      >
                        Quay l·∫°i h·ªì s∆° b·ªánh √°n
                      </Button>
                    </Space>
                  </div>
                </div>
              )}

              {/* Step 2: Lab Tests Prescription */}
              {currentStep === 1 && (
                <div className="form-section slide-in">
                  <Alert
                    message="Ch·ªâ ƒë·ªãnh c√°c x√©t nghi·ªám c·∫ßn thi·∫øt"
                    description="Sau khi ch·ªâ ƒë·ªãnh x√©t nghi·ªám, b·ªánh nh√¢n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn sang ph√≤ng x√©t nghi·ªám. B√°c sƒ© c√≥ th·ªÉ kh√°m b·ªánh nh√¢n kh√°c trong th·ªùi gian ch·ªù k·∫øt qu·∫£."
                    type="info"
                    showIcon
                    className="alert-enhanced"
                  />

                  <Form.Item
                    name="labTests"
                    label="X√©t nghi·ªám nha khoa c·∫ßn l√†m"
                    rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt x√©t nghi·ªám' }]}
                    className="form-item-enhanced"
                  >
                    <Select
                      mode="multiple"
                      placeholder="Ch·ªçn c√°c x√©t nghi·ªám nha khoa c·∫ßn thi·∫øt"
                      options={[
                        { label: 'X√©t nghi·ªám vi khu·∫©n trong mi·ªáng', value: 'Oral Bacteria Test' },
                        { label: 'X√©t nghi·ªám pH n∆∞·ªõc b·ªçt', value: 'Saliva pH Test' },
                        { label: 'X√©t nghi·ªám m·∫£ng b√°m rƒÉng', value: 'Plaque Test' },
                        { label: 'X√©t nghi·ªám ƒë·ªô nh·∫°y c·∫£m rƒÉng', value: 'Tooth Sensitivity Test' },
                        { label: 'X√©t nghi·ªám ch·ª©c nƒÉng nhai', value: 'Chewing Function Test' }
                      ]}
                    />
                  </Form.Item>

                  <Form.Item
                    name="imagingTests"
                    label="Ch·∫©n ƒëo√°n h√¨nh ·∫£nh nha khoa"
                    rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt x√©t nghi·ªám h√¨nh ·∫£nh' }]}
                    className="form-item-enhanced"
                  >
                    <Select
                      mode="multiple"
                      placeholder="Ch·ªçn c√°c x√©t nghi·ªám h√¨nh ·∫£nh nha khoa"
                      options={[
                        { label: 'X-quang rƒÉng (Periapical)', value: 'Periapical X-ray' },
                    { label: 'X-quang to√†n c·∫£nh (Panoramic)', value: 'Panoramic X-ray' },
                    { label: 'X-quang c·∫Øn c√°nh (Bitewing)', value: 'Bitewing X-ray' },
                    { label: 'CT Cone Beam (CBCT)', value: 'CBCT' },
                    { label: 'X-quang s·ªç m·∫∑t', value: 'Cephalometric X-ray' },
                    { label: 'X-quang TMJ (kh·ªõp th√°i d∆∞∆°ng h√†m)', value: 'TMJ X-ray' }
                  ]}
                />
              </Form.Item>

                  <Form.Item
                    name="testInstructions"
                    label="H∆∞·ªõng d·∫´n cho b·ªánh nh√¢n"
                    className="form-item-enhanced"
                  >
                    <TextArea
                      rows={3}
                      placeholder="H∆∞·ªõng d·∫´n b·ªánh nh√¢n tr∆∞·ªõc khi l√†m x√©t nghi·ªám..."
                    />
                  </Form.Item>
                  
                  <div className="action-buttons">
                    <Space>
                      <Button 
                        type="primary" 
                        icon={<SaveOutlined />}
                        onClick={async () => {
                          try {
                            const values = await form.validateFields();
                            await handleSaveLabTests(values);
                          } catch (error) {
                            if (error.errorFields) {
                              message.error('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc');
                            } else {
                              console.error('Error validating form:', error);
                              message.error('L·ªói khi x·ª≠ l√Ω form');
                            }
                          }
                        }}
                        loading={loading}
                        className="btn-primary-enhanced"
                      >
                        Ch·ªâ ƒë·ªãnh x√©t nghi·ªám
                      </Button>
                      <Button 
                        type="primary"
                        onClick={async () => {
                        try {
                          console.log('=== DEBUG: Chuy·ªÉn b·ªánh nh√¢n ƒëi x√©t nghi·ªám ===');
                          console.log('AppointmentId:', appointmentId);
                          console.log('Appointment object:', appointment);
                          
                          // Validate appointmentId
                          if (!appointmentId) {
                            message.error('Kh√¥ng t√¨m th·∫•y ID l·ªãch h·∫πn');
                            return;
                          }

                          // Get form values
                          const formValues = form.getFieldsValue();
                          console.log('Form values:', formValues);

                          // Validate required fields
                          if (!formValues.labTests || formValues.labTests.length === 0) {
                            message.error('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt x√©t nghi·ªám nha khoa');
                            return;
                          }

                          if (!formValues.imagingTests || formValues.imagingTests.length === 0) {
                            message.error('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt x√©t nghi·ªám h√¨nh ·∫£nh');
                            return;
                          }

                          const updateData = {
                            status: 'waiting-for-results',
                            labTests: formValues.labTests,
                            imagingTests: formValues.imagingTests,
                            testInstructions: formValues.testInstructions || ''
                          };

                          console.log('Update data to send:', updateData);
                          console.log('Calling updateAppointmentStatus...');

                          // Call API
                          const result = await updateAppointmentStatus(appointmentId, updateData);
                          console.log('API response:', result);
                          
                          message.success('B·ªánh nh√¢n ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang ph√≤ng x√©t nghi·ªám. L·ªãch h·∫πn s·∫Ω chuy·ªÉn sang tr·∫°ng th√°i "Ch·ªù k·∫øt qu·∫£ x√©t nghi·ªám". B·∫°n c√≥ th·ªÉ kh√°m b·ªánh nh√¢n kh√°c v√† quay l·∫°i sau khi c√≥ k·∫øt qu·∫£.');
                          
                          console.log('Navigating to appointments...');
                          navigate('/doctor/appointments');
                        } catch (error) {
                          console.error('=== ERROR: Chuy·ªÉn b·ªánh nh√¢n ƒëi x√©t nghi·ªám ===');
                          console.error('Error details:', error);
                          console.error('Error response:', error.response);
                          console.error('Error message:', error.message);
                          
                          message.error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªãch h·∫πn: ' + (error.response?.data?.message || error.message));
                        }
                        }}
                        className="btn-primary-enhanced"
                      >
                        Chuy·ªÉn b·ªánh nh√¢n ƒëi x√©t nghi·ªám
                      </Button>
                      <Button 
                        onClick={() => navigate('/doctor/appointments')}
                        className="btn-secondary-enhanced"
                      >
                        Quay l·∫°i h·ªì s∆° b·ªánh √°n
                      </Button>
                    </Space>
                  </div>
                </div>
              )}

              {/* Step 3: Diagnosis based on Test Results */}
              {currentStep === 2 && (
                <div className="form-section slide-in">
                  <Alert
                    message="Ch·∫©n ƒëo√°n d·ª±a tr√™n k·∫øt qu·∫£ x√©t nghi·ªám"
                    description="D·ª±a tr√™n k·∫øt qu·∫£ x√©t nghi·ªám v√† kh√°m l√¢m s√†ng ƒë·ªÉ ƒë∆∞a ra ch·∫©n ƒëo√°n ch√≠nh x√°c v√† k·∫ø ho·∫°ch ƒëi·ªÅu tr·ªã ph√π h·ª£p."
                    type="success"
                    showIcon
                    className="alert-enhanced"
                  />

                  <Form.Item
                    name="testResults"
                    label="K·∫øt qu·∫£ x√©t nghi·ªám"
                    className="form-item-enhanced"
                  >
                    <TextArea
                      rows={2}
                      placeholder="K·∫øt qu·∫£ X-quang, x√©t nghi·ªám vi khu·∫©n, pH n∆∞·ªõc b·ªçt..."
                    />
                  </Form.Item>

                  <Form.Item
                    name="finalDiagnosis"
                    label="Ch·∫©n ƒëo√°n cu·ªëi c√πng"
                    rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p ch·∫©n ƒëo√°n cu·ªëi c√πng' }]}
                    className="form-item-enhanced"
                  >
                    <TextArea
                      rows={4}
                      placeholder="Ch·∫©n ƒëo√°n ch√≠nh x√°c d·ª±a tr√™n kh√°m l√¢m s√†ng v√† k·∫øt qu·∫£ x√©t nghi·ªám..."
                    />
                  </Form.Item>
                  
                  <div className="action-buttons">
                    <Space>
                      <Button 
                        type="primary" 
                        icon={<SaveOutlined />}
                        onClick={async () => {
                          try {
                            const values = await form.validateFields();
                            await handleSaveDiagnosis(values);
                          } catch (error) {
                            if (error.errorFields) {
                              message.error('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc');
                            } else {
                              console.error('Error validating form:', error);
                              message.error('L·ªói khi x·ª≠ l√Ω form');
                            }
                          }
                        }}
                        loading={loading}
                        className="btn-primary-enhanced"
                      >
                        L∆∞u ch·∫©n ƒëo√°n
                      </Button>
                      <Button 
                        onClick={() => navigate('/doctor/appointments')}
                        className="btn-secondary-enhanced"
                      >
                        Quay l·∫°i h·ªì s∆° b·ªánh √°n
                      </Button>
                    </Space>
                  </div>
                </div>
              )}

              {/* Step 3: Treatment Execution */}
              {currentStep === 3 && (
                <div className="form-section slide-in">
                  <Alert
                    message="Th·ª±c hi·ªán ƒëi·ªÅu tr·ªã nha khoa"
                    description="Ghi l·∫°i c√°c d·ªãch v·ª• rƒÉng ƒë√£ th·ª±c hi·ªán cho b·ªánh nh√¢n (tr√°m rƒÉng, nh·ªï rƒÉng, c·∫°o v√¥i, ch·ªânh nha...)."
                    type="info"
                    showIcon
                    className="alert-enhanced"
                  />

                  <div style={{ marginBottom: '24px' }}>
                    <Button 
                      type="dashed" 
                      icon={<PlusOutlined />}
                      onClick={handleAddPrescriptionItem}
                      block
                      size="large"
                      className="btn-secondary-enhanced"
                    >
                      Th√™m thu·ªëc v√†o ƒë∆°n
                    </Button>
                  </div>

                  {prescriptionItems.length > 0 && (
                    <div className="prescription-table" style={{ marginBottom: '24px' }}>
                      <Table
                        columns={prescriptionColumns}
                        dataSource={prescriptionItems}
                        rowKey="id"
                        pagination={false}
                        size="small"
                      />
                    </div>
                  )}


                  <Form.Item
                    name="procedures"
                    label="Th·ªß thu·∫≠t/Ph·∫´u thu·∫≠t nha khoa"
                    className="form-item-enhanced"
                  >
                    <TextArea
                      rows={3}
                      placeholder="C√°c th·ªß thu·∫≠t nha khoa c·∫ßn th·ª±c hi·ªán (tr√°m rƒÉng, nh·ªï rƒÉng, c·∫°o v√¥i, ch·ªânh nha...)..."
                    />
                  </Form.Item>

                  <Form.Item
                    name="homeCare"
                    label="H∆∞·ªõng d·∫´n chƒÉm s√≥c t·∫°i nh√†"
                    className="form-item-enhanced"
                  >
                    <TextArea
                      rows={3}
                      placeholder="H∆∞·ªõng d·∫´n b·ªánh nh√¢n chƒÉm s√≥c t·∫°i nh√†..."
                    />
                  </Form.Item>
                  
                  <div className="action-buttons">
                    <Space>
                      <Button 
                        type="primary" 
                        icon={<SaveOutlined />}
                        onClick={async () => {
                          try {
                            const values = await form.validateFields();
                            await handleSaveTreatment(values);
                          } catch (error) {
                            if (error.errorFields) {
                              message.error('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc');
                            } else {
                              console.error('Error validating form:', error);
                              message.error('L·ªói khi x·ª≠ l√Ω form');
                            }
                          }
                        }}
                        loading={loading}
                        className="btn-primary-enhanced"
                      >
                        L∆∞u k·∫øt qu·∫£ ƒëi·ªÅu tr·ªã
                      </Button>
                      <Button 
                        onClick={() => navigate('/doctor/appointments')}
                        className="btn-secondary-enhanced"
                      >
                        Quay l·∫°i h·ªì s∆° b·ªánh √°n
                      </Button>
                    </Space>
                  </div>
                </div>
              )}

              {/* Step 4: Prescription & Follow-up */}
              {currentStep === 4 && (
                <div className="form-section slide-in">
                  <Alert
                    message="K√™ ƒë∆°n thu·ªëc v√† l√™n l·ªãch t√°i kh√°m"
                    description="K√™ ƒë∆°n thu·ªëc c·∫ßn thi·∫øt cho b·ªánh nh√¢n v√† l√™n l·ªãch t√°i kh√°m ph√π h·ª£p."
                    type="success"
                    showIcon
                    className="alert-enhanced"
                  />

                  <Row gutter={[24, 24]}>
                    <Col xs={24} sm={12}>
                      <Form.Item
                        name="followUpDate"
                        label="L·ªãch t√°i kh√°m"
                        rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ng√†y t√°i kh√°m' }]}
                        className="form-item-enhanced"
                      >
                        <DatePicker 
                          style={{ width: '100%' }}
                          placeholder="Ch·ªçn ng√†y t√°i kh√°m"
                      showTime={{ format: 'HH:mm' }}
                    />
                  </Form.Item>
                </Col>
                    <Col xs={24} sm={12}>
                      <Form.Item
                        name="followUpType"
                        label="Lo·∫°i t√°i kh√°m"
                        className="form-item-enhanced"
                      >
                        <Select placeholder="Ch·ªçn lo·∫°i t√°i kh√°m">
                          <Option value="routine">T√°i kh√°m ƒë·ªãnh k·ª≥ (6 th√°ng)</Option>
                          <Option value="urgent">T√°i kh√°m kh·∫©n c·∫•p (1-3 ng√†y)</Option>
                          <Option value="follow-up">Theo d√µi ƒëi·ªÅu tr·ªã (1-2 tu·∫ßn)</Option>
                          <Option value="check-up">Ki·ªÉm tra sau ƒëi·ªÅu tr·ªã (1 th√°ng)</Option>
                          <Option value="orthodontic">T√°i kh√°m ch·ªânh nha (1-2 th√°ng)</Option>
                        </Select>
                      </Form.Item>
                    </Col>
                  </Row>

                  <Form.Item
                    name="followUpInstructions"
                    label="H∆∞·ªõng d·∫´n t√°i kh√°m"
                    rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p h∆∞·ªõng d·∫´n t√°i kh√°m' }]}
                    className="form-item-enhanced"
                  >
                    <TextArea
                      rows={3}
                      placeholder="H∆∞·ªõng d·∫´n chi ti·∫øt cho l·∫ßn t√°i kh√°m..."
                    />
                  </Form.Item>

                  <Form.Item
                    name="warnings"
                    label="C·∫£nh b√°o"
                    className="form-item-enhanced"
                  >
                    <TextArea
                      rows={3}
                      placeholder="C√°c d·∫•u hi·ªáu c·∫ßn ƒë·∫øn ngay b·ªánh vi·ªán..."
                    />
                  </Form.Item>
                  
                  <div className="action-buttons">
                    <Space>
                      <Button 
                        type="primary" 
                        icon={<SaveOutlined />}
                        onClick={async () => {
                          try {
                            const values = await form.validateFields();
                            await handleSaveFollowUp(values);
                          } catch (error) {
                            if (error.errorFields) {
                              message.error('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc');
                            } else {
                              console.error('Error validating form:', error);
                              message.error('L·ªói khi x·ª≠ l√Ω form');
                            }
                          }
                        }}
                        loading={loading}
                        className="btn-primary-enhanced"
                      >
                        L∆∞u theo d√µi
                      </Button>
                      <Button 
                        onClick={() => navigate('/doctor/appointments')}
                        className="btn-secondary-enhanced"
                      >
                        Quay l·∫°i h·ªì s∆° b·ªánh √°n
                      </Button>
                    </Space>
                  </div>
                </div>
              )}

              {/* Step 5: Complete */}
              {currentStep === 4 && (
                <div className="form-section slide-in">
                  <div style={{ textAlign: 'center', padding: '40px 0' }}>
                    <Text style={{ fontSize: '16px', color: '#52c41a' }}>
                      ‚úÖ ƒê√£ ho√†n th√†nh t·∫•t c·∫£ c√°c b∆∞·ªõc kh√°m b·ªánh
                    </Text>
                    <br />
                    <br />
                    <Space size="large">
                      <Button 
                        type="primary" 
                        size="large"
                        onClick={handleCompleteExamination}
                        loading={loading}
                        className="btn-primary-enhanced"
                        style={{
                          background: 'linear-gradient(135deg, #52c41a 0%, #73d13d 100%)',
                          border: 'none',
                          boxShadow: '0 4px 12px rgba(82, 196, 26, 0.3)',
                          fontWeight: '600',
                          fontSize: '16px',
                          height: '48px',
                          padding: '0 32px'
                        }}
                      >
                        ‚úÖ K·∫øt th√∫c kh√°m b·ªánh
                      </Button>
                      <Button 
                        size="large"
                        onClick={() => navigate('/doctor/appointments')}
                        className="btn-secondary-enhanced"
                      >
                        Quay l·∫°i h·ªì s∆° b·ªánh √°n
                      </Button>
                    </Space>
                  </div>
                </div>
              )}

            </Form>
          </Card>
        </div>

        {/* Prescription Modal */}
        <Modal
          title="Th√™m thu·ªëc v√†o ƒë∆°n"
          open={prescriptionModalVisible}
          onCancel={() => {
            setPrescriptionModalVisible(false);
            prescriptionForm.resetFields();
          }}
          className="modal-enhanced"
        onOk={() => prescriptionForm.submit()}
        width={600}
      >
        <Form
          form={prescriptionForm}
          layout="vertical"
          onFinish={handleSavePrescriptionItem}
        >
          <Form.Item
            name="medicine"
            label="T√™n thu·ªëc"
            rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn thu·ªëc' }]}
          >
            <Select
              showSearch
              placeholder="Ch·ªçn thu·ªëc"
              optionFilterProp="children"
              filterOption={(input, option) =>
                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0
              }
            >
              {medicines.map(medicine => (
                <Option key={medicine._id} value={medicine.name}>
                  {medicine.name} - {medicine.description}
                </Option>
              ))}
            </Select>
          </Form.Item>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="dosage"
                label="Li·ªÅu l∆∞·ª£ng"
                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p li·ªÅu l∆∞·ª£ng' }]}
              >
                <Input placeholder="VD: 500mg" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="frequency"
                label="T·∫ßn su·∫•t"
                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p t·∫ßn su·∫•t' }]}
              >
                <Input placeholder="VD: 3 l·∫ßn/ng√†y" />
              </Form.Item>
            </Col>
          </Row>

          <Form.Item
            name="duration"
            label="Th·ªùi gian s·ª≠ d·ª•ng"
            rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p th·ªùi gian s·ª≠ d·ª•ng' }]}
          >
            <Input placeholder="VD: 7 ng√†y" />
          </Form.Item>

          <Form.Item
            name="instructions"
            label="H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"
          >
            <TextArea
              rows={3}
              placeholder="H∆∞·ªõng d·∫´n chi ti·∫øt c√°ch s·ª≠ d·ª•ng thu·ªëc..."
            />
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
  } catch (error) {
    console.error('Error rendering MedicalRecord:', error);
    return (
      <div style={{ padding: '24px', textAlign: 'center' }}>
        <h3>ƒê√£ x·∫£y ra l·ªói khi t·∫£i trang</h3>
        <p>Vui l√≤ng th·ª≠ l·∫°i sau</p>
        <Button onClick={() => navigate('/doctor/appointments')}>
          Quay l·∫°i danh s√°ch l·ªãch h·∫πn
        </Button>
      </div>
    );
  }
};

const MedicalRecordWithErrorBoundary = () => {
  return (
    <ErrorBoundary>
      <MedicalRecord />
    </ErrorBoundary>
  );
};

export default MedicalRecordWithErrorBoundary;
